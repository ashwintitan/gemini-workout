{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ashwin\\\\Apps\\\\gemini-workout\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './index.css';\n\n// --- CONFIGURATION CONSTANTS ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_ROUNDS = 15;\nconst MAX_TIME = 120;\nconst WORK_INCREMENT = 15;\nconst REST_INCREMENT = 5;\nconst PREP_TIME = 5;\n\n// --- WORKOUT STATE ENUM ---\nconst WORKOUT_STATES = {\n  SETUP: 'SETUP',\n  PREP: 'PREP',\n  WORK: 'WORK',\n  REST: 'REST',\n  COMPLETE: 'COMPLETE'\n};\n\n// --- HELPER FUNCTIONS ---\n\nconst formatTime = seconds => {\n  const minutes = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;\n};\n\n// Function to play the sound\nconst playHighPitchedNoise = () => {\n  try {\n    const audio = new Audio('/chime.mp3');\n    audio.volume = 0.8;\n    audio.play().catch(e => console.error(\"Audio playback error:\", e));\n  } catch (e) {\n    console.error(\"Browser audio API issue:\", e);\n  }\n};\n\n// --- SCROLL WHEEL COMPONENT (The animated input) ---\nconst ScrollWheel = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(({\n  label,\n  value,\n  max,\n  increment,\n  min,\n  onChange\n}) => {\n  _s();\n  const wheelRef = useRef(null);\n  const itemHeight = 30; // Defined in CSS\n  const initialOffset = 1000; // Large offset for infinite feel\n\n  // Calculate the index corresponding to the current value\n  const currentIndex = Math.floor((value - min) / increment);\n\n  // This runs whenever the value changes to keep the scroll position synced\n  useEffect(() => {\n    const centerIndex = initialOffset + currentIndex;\n    if (wheelRef.current) {\n      // Smoothly scroll the wheel to the correct position\n      wheelRef.current.scrollTop = centerIndex * itemHeight;\n    }\n  }, [currentIndex, min, increment]);\n  const handleScroll = e => {\n    // Debounce or throttle this in a production environment\n    const element = e.currentTarget;\n    const scrollIndex = Math.round(element.scrollTop / itemHeight);\n\n    // Determine the actual value based on the centered index\n    const newIndex = scrollIndex % (Math.floor((max - min) / increment) + 1);\n    const newValue = newIndex * increment + min;\n\n    // Only update if the value actually changed\n    if (newValue !== value) {\n      onChange(newValue);\n    }\n  };\n\n  // Generate enough items to simulate infinite scroll visually (2000 items)\n  const totalPossibleValues = Math.floor((max - min) / increment) + 1;\n  const items = [];\n  for (let i = 0; i < 2000; i++) {\n    const val = i % totalPossibleValues * increment + min;\n    items.push(/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll-item\",\n      style: {\n        height: itemHeight\n      },\n      children: val\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-group\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"input-label\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: wheelRef,\n      className: \"scroll-wheel\",\n      onScroll: handleScroll,\n      children: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"value-overlay\",\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}, \"bK/miE1DadxXyXcRNLmP7c9Vrho=\")), \"bK/miE1DadxXyXcRNLmP7c9Vrho=\");\n\n// --- MAIN APP COMPONENT ---\n_c2 = ScrollWheel;\nfunction App() {\n  _s2();\n  const [settings, setSettings] = useState({\n    rounds: 5,\n    workTime: 60,\n    restTime: 30\n  });\n  const [timerState, setTimerState] = useState(WORKOUT_STATES.SETUP);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [currentRound, setCurrentRound] = useState(1);\n  const intervalRef = useRef(null);\n\n  // Logic to handle state transitions (WORK -> REST, REST -> WORK)\n  const handleNextState = useCallback(() => {\n    if (timerState === WORKOUT_STATES.PREP) {\n      setTimerState(WORKOUT_STATES.WORK);\n      setTimeRemaining(settings.workTime);\n    } else if (timerState === WORKOUT_STATES.WORK) {\n      if (currentRound < settings.rounds) {\n        setTimerState(WORKOUT_STATES.REST);\n        setTimeRemaining(settings.restTime);\n      } else {\n        setTimerState(WORKOUT_STATES.COMPLETE);\n      }\n    } else if (timerState === WORKOUT_STATES.REST) {\n      const nextRound = currentRound + 1;\n      setCurrentRound(nextRound);\n      if (nextRound <= settings.rounds) {\n        setTimerState(WORKOUT_STATES.WORK);\n        setTimeRemaining(settings.workTime);\n      } else {\n        setTimerState(WORKOUT_STATES.COMPLETE);\n      }\n    }\n  }, [timerState, settings, currentRound]);\n\n  // The main timer loop (runs every second)\n  useEffect(() => {\n    if (timerState === WORKOUT_STATES.SETUP || timerState === WORKOUT_STATES.COMPLETE) {\n      return;\n    }\n    intervalRef.current = setInterval(() => {\n      setTimeRemaining(prevTime => {\n        const newTime = prevTime - 1;\n\n        // Sound Trigger: Plays on 3, 2, 1, 0 for all active timers\n        if (newTime >= 0 && newTime <= 3) {\n          playHighPitchedNoise();\n        }\n        if (newTime < 0) {\n          clearInterval(intervalRef.current);\n          handleNextState();\n          return 0;\n        }\n        return newTime;\n      });\n    }, 1000);\n    return () => clearInterval(intervalRef.current);\n  }, [timerState, settings.rounds, currentRound, handleNextState]);\n  const startWorkout = () => {\n    // Clear any previous interval just in case\n    clearInterval(intervalRef.current);\n    if (settings.rounds > 0 && settings.workTime > 0) {\n      setTimerState(WORKOUT_STATES.PREP);\n      setTimeRemaining(PREP_TIME); // Start 5-second countdown\n      setCurrentRound(1);\n    }\n  };\n\n  // Helper to reset the app\n  const resetWorkout = () => {\n    clearInterval(intervalRef.current);\n    setTimerState(WORKOUT_STATES.SETUP);\n    setTimeRemaining(0);\n    setCurrentRound(1);\n  };\n\n  // --- RENDER LOGIC ---\n\n  if (timerState === WORKOUT_STATES.SETUP) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app setup-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Interval Timer Setup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScrollWheel, {\n        label: \"Rounds (Max 15)\",\n        value: settings.rounds,\n        min: 1,\n        max: MAX_ROUNDS,\n        increment: 1,\n        onChange: val => setSettings({\n          ...settings,\n          rounds: val\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScrollWheel, {\n        label: `Work Time (Max ${MAX_TIME}s)`,\n        value: settings.workTime,\n        min: WORK_INCREMENT,\n        max: MAX_TIME,\n        increment: WORK_INCREMENT,\n        onChange: val => setSettings({\n          ...settings,\n          workTime: val\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScrollWheel, {\n        label: `Rest Time (Max ${MAX_TIME}s)`,\n        value: settings.restTime,\n        min: REST_INCREMENT,\n        max: MAX_TIME,\n        increment: REST_INCREMENT,\n        onChange: val => setSettings({\n          ...settings,\n          restTime: val\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startWorkout,\n        className: \"btn-start\",\n        disabled: settings.rounds === 0 || settings.workTime === 0,\n        children: \"Start Workout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Active Timer View\n  const phaseLabel = {\n    [WORKOUT_STATES.PREP]: 'GET READY',\n    [WORKOUT_STATES.WORK]: 'WORK',\n    [WORKOUT_STATES.REST]: 'REST',\n    [WORKOUT_STATES.COMPLETE]: 'COMPLETE'\n  }[timerState];\n  const isComplete = timerState === WORKOUT_STATES.COMPLETE;\n  const isPrep = timerState === WORKOUT_STATES.PREP;\n  const isWorking = timerState === WORKOUT_STATES.WORK;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app timer-view ${isWorking ? 'work-phase' : ''} ${timerState === WORKOUT_STATES.REST ? 'rest-phase' : ''} ${isComplete ? 'complete-phase' : ''}`,\n    children: [!isComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"round-tracker\",\n      children: isPrep ? 'PREP' : `ROUND ${currentRound} OF ${settings.rounds}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `phase-label ${phaseLabel.toLowerCase()}`,\n      children: phaseLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-timer\",\n      children: isPrep ? timeRemaining : formatTime(timeRemaining)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }, this), isComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"complete-message\",\n      children: \"WORKOUT COMPLETE! \\uD83D\\uDCAA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetWorkout,\n      className: \"btn-reset\",\n      children: isComplete ? 'New Workout' : 'Stop / Reset'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 9\n  }, this);\n}\n_s2(App, \"j9llH/ZadbqnN/RVAaqrV3pEzZQ=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ScrollWheel$React.memo\");\n$RefreshReg$(_c2, \"ScrollWheel\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","MAX_ROUNDS","MAX_TIME","WORK_INCREMENT","REST_INCREMENT","PREP_TIME","WORKOUT_STATES","SETUP","PREP","WORK","REST","COMPLETE","formatTime","seconds","minutes","Math","floor","secs","String","padStart","playHighPitchedNoise","audio","Audio","volume","play","catch","e","console","error","ScrollWheel","_s","memo","_c","label","value","max","increment","min","onChange","wheelRef","itemHeight","initialOffset","currentIndex","centerIndex","current","scrollTop","handleScroll","element","currentTarget","scrollIndex","round","newIndex","newValue","totalPossibleValues","items","i","val","push","className","style","height","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","onScroll","_c2","App","_s2","settings","setSettings","rounds","workTime","restTime","timerState","setTimerState","timeRemaining","setTimeRemaining","currentRound","setCurrentRound","intervalRef","handleNextState","nextRound","setInterval","prevTime","newTime","clearInterval","startWorkout","resetWorkout","onClick","disabled","phaseLabel","isComplete","isPrep","isWorking","toLowerCase","_c3","$RefreshReg$"],"sources":["C:/Ashwin/Apps/gemini-workout/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport './index.css';\r\n\r\n// --- CONFIGURATION CONSTANTS ---\r\nconst MAX_ROUNDS = 15;\r\nconst MAX_TIME = 120;\r\nconst WORK_INCREMENT = 15;\r\nconst REST_INCREMENT = 5;\r\nconst PREP_TIME = 5;\r\n\r\n// --- WORKOUT STATE ENUM ---\r\nconst WORKOUT_STATES = {\r\n    SETUP: 'SETUP',\r\n    PREP: 'PREP',\r\n    WORK: 'WORK',\r\n    REST: 'REST',\r\n    COMPLETE: 'COMPLETE'\r\n};\r\n\r\n// --- HELPER FUNCTIONS ---\r\n\r\nconst formatTime = (seconds) => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;\r\n};\r\n\r\n// Function to play the sound\r\nconst playHighPitchedNoise = () => {\r\n    try {\r\n        const audio = new Audio('/chime.mp3'); \r\n        audio.volume = 0.8;\r\n        audio.play().catch(e => console.error(\"Audio playback error:\", e));\r\n    } catch (e) {\r\n        console.error(\"Browser audio API issue:\", e);\r\n    }\r\n};\r\n\r\n// --- SCROLL WHEEL COMPONENT (The animated input) ---\r\nconst ScrollWheel = React.memo(({ label, value, max, increment, min, onChange }) => {\r\n    const wheelRef = useRef(null);\r\n    const itemHeight = 30; // Defined in CSS\r\n    const initialOffset = 1000; // Large offset for infinite feel\r\n\r\n    // Calculate the index corresponding to the current value\r\n    const currentIndex = Math.floor((value - min) / increment);\r\n\r\n    // This runs whenever the value changes to keep the scroll position synced\r\n    useEffect(() => {\r\n        const centerIndex = initialOffset + currentIndex;\r\n        if (wheelRef.current) {\r\n            // Smoothly scroll the wheel to the correct position\r\n            wheelRef.current.scrollTop = centerIndex * itemHeight;\r\n        }\r\n    }, [currentIndex, min, increment]);\r\n\r\n\r\n    const handleScroll = (e) => {\r\n        // Debounce or throttle this in a production environment\r\n        const element = e.currentTarget;\r\n        const scrollIndex = Math.round(element.scrollTop / itemHeight);\r\n        \r\n        // Determine the actual value based on the centered index\r\n        const newIndex = scrollIndex % (Math.floor((max - min) / increment) + 1);\r\n        const newValue = (newIndex * increment) + min;\r\n\r\n        // Only update if the value actually changed\r\n        if (newValue !== value) {\r\n            onChange(newValue);\r\n        }\r\n    };\r\n    \r\n    // Generate enough items to simulate infinite scroll visually (2000 items)\r\n    const totalPossibleValues = Math.floor((max - min) / increment) + 1;\r\n    const items = [];\r\n    for (let i = 0; i < 2000; i++) {\r\n        const val = ((i % totalPossibleValues) * increment) + min;\r\n        items.push(\r\n            <div key={i} className=\"scroll-item\" style={{ height: itemHeight }}>\r\n                {val}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"input-group\">\r\n            <label className=\"input-label\">{label}</label>\r\n            <div \r\n                ref={wheelRef} \r\n                className=\"scroll-wheel\"\r\n                onScroll={handleScroll}\r\n            >\r\n                {items}\r\n            </div>\r\n            {/* The current value is visibly displayed by the centered scroll position */}\r\n            <div className=\"value-overlay\">{value}</div>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n// --- MAIN APP COMPONENT ---\r\n\r\nfunction App() {\r\n    const [settings, setSettings] = useState({ rounds: 5, workTime: 60, restTime: 30 });\r\n    const [timerState, setTimerState] = useState(WORKOUT_STATES.SETUP);\r\n    const [timeRemaining, setTimeRemaining] = useState(0);\r\n    const [currentRound, setCurrentRound] = useState(1);\r\n    const intervalRef = useRef(null);\r\n\r\n    // Logic to handle state transitions (WORK -> REST, REST -> WORK)\r\n    const handleNextState = useCallback(() => {\r\n        if (timerState === WORKOUT_STATES.PREP) {\r\n            setTimerState(WORKOUT_STATES.WORK);\r\n            setTimeRemaining(settings.workTime);\r\n\r\n        } else if (timerState === WORKOUT_STATES.WORK) {\r\n            if (currentRound < settings.rounds) {\r\n                setTimerState(WORKOUT_STATES.REST);\r\n                setTimeRemaining(settings.restTime);\r\n            } else {\r\n                setTimerState(WORKOUT_STATES.COMPLETE);\r\n            }\r\n\r\n        } else if (timerState === WORKOUT_STATES.REST) {\r\n            const nextRound = currentRound + 1;\r\n            setCurrentRound(nextRound);\r\n\r\n            if (nextRound <= settings.rounds) {\r\n                setTimerState(WORKOUT_STATES.WORK);\r\n                setTimeRemaining(settings.workTime);\r\n            } else {\r\n                setTimerState(WORKOUT_STATES.COMPLETE);\r\n            }\r\n        }\r\n    }, [timerState, settings, currentRound]);\r\n\r\n    // The main timer loop (runs every second)\r\n    useEffect(() => {\r\n        if (timerState === WORKOUT_STATES.SETUP || timerState === WORKOUT_STATES.COMPLETE) {\r\n            return;\r\n        }\r\n\r\n        intervalRef.current = setInterval(() => {\r\n            setTimeRemaining(prevTime => {\r\n                const newTime = prevTime - 1;\r\n\r\n                // Sound Trigger: Plays on 3, 2, 1, 0 for all active timers\r\n                if (newTime >= 0 && newTime <= 3) {\r\n                    playHighPitchedNoise();\r\n                }\r\n\r\n                if (newTime < 0) {\r\n                    clearInterval(intervalRef.current);\r\n                    handleNextState();\r\n                    return 0;\r\n                }\r\n\r\n                return newTime;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(intervalRef.current);\r\n    }, [timerState, settings.rounds, currentRound, handleNextState]);\r\n\r\n    const startWorkout = () => {\r\n        // Clear any previous interval just in case\r\n        clearInterval(intervalRef.current);\r\n\r\n        if (settings.rounds > 0 && settings.workTime > 0) {\r\n            setTimerState(WORKOUT_STATES.PREP);\r\n            setTimeRemaining(PREP_TIME); // Start 5-second countdown\r\n            setCurrentRound(1);\r\n        }\r\n    };\r\n\r\n    // Helper to reset the app\r\n    const resetWorkout = () => {\r\n        clearInterval(intervalRef.current);\r\n        setTimerState(WORKOUT_STATES.SETUP);\r\n        setTimeRemaining(0);\r\n        setCurrentRound(1);\r\n    };\r\n\r\n    // --- RENDER LOGIC ---\r\n\r\n    if (timerState === WORKOUT_STATES.SETUP) {\r\n        return (\r\n            <div className=\"app setup-view\">\r\n                <h1 className=\"title\">Interval Timer Setup</h1>\r\n                <ScrollWheel \r\n                    label=\"Rounds (Max 15)\"\r\n                    value={settings.rounds}\r\n                    min={1}\r\n                    max={MAX_ROUNDS}\r\n                    increment={1}\r\n                    onChange={(val) => setSettings({...settings, rounds: val})}\r\n                />\r\n                <ScrollWheel \r\n                    label={`Work Time (Max ${MAX_TIME}s)`}\r\n                    value={settings.workTime}\r\n                    min={WORK_INCREMENT}\r\n                    max={MAX_TIME}\r\n                    increment={WORK_INCREMENT}\r\n                    onChange={(val) => setSettings({...settings, workTime: val})}\r\n                />\r\n                <ScrollWheel \r\n                    label={`Rest Time (Max ${MAX_TIME}s)`}\r\n                    value={settings.restTime}\r\n                    min={REST_INCREMENT}\r\n                    max={MAX_TIME}\r\n                    increment={REST_INCREMENT}\r\n                    onChange={(val) => setSettings({...settings, restTime: val})}\r\n                />\r\n                <button \r\n                    onClick={startWorkout} \r\n                    className=\"btn-start\"\r\n                    disabled={settings.rounds === 0 || settings.workTime === 0}\r\n                >\r\n                    Start Workout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Active Timer View\r\n    const phaseLabel = {\r\n        [WORKOUT_STATES.PREP]: 'GET READY',\r\n        [WORKOUT_STATES.WORK]: 'WORK',\r\n        [WORKOUT_STATES.REST]: 'REST',\r\n        [WORKOUT_STATES.COMPLETE]: 'COMPLETE'\r\n    }[timerState];\r\n\r\n    const isComplete = timerState === WORKOUT_STATES.COMPLETE;\r\n    const isPrep = timerState === WORKOUT_STATES.PREP;\r\n    const isWorking = timerState === WORKOUT_STATES.WORK;\r\n\r\n    return (\r\n        <div className={`app timer-view ${isWorking ? 'work-phase' : ''} ${timerState === WORKOUT_STATES.REST ? 'rest-phase' : ''} ${isComplete ? 'complete-phase' : ''}`}>\r\n            \r\n            {!isComplete && (\r\n                <div className=\"round-tracker\">\r\n                    {isPrep ? 'PREP' : `ROUND ${currentRound} OF ${settings.rounds}`}\r\n                </div>\r\n            )}\r\n\r\n            <div className={`phase-label ${phaseLabel.toLowerCase()}`}>{phaseLabel}</div>\r\n\r\n            <div className=\"main-timer\">\r\n                {isPrep ? timeRemaining : formatTime(timeRemaining)}\r\n            </div>\r\n            \r\n            {isComplete && (\r\n                <div className=\"complete-message\">\r\n                    WORKOUT COMPLETE! 💪\r\n                </div>\r\n            )}\r\n\r\n            <button onClick={resetWorkout} className=\"btn-reset\">\r\n                {isComplete ? 'New Workout' : 'Stop / Reset'}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}