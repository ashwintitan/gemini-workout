{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ashwin\\\\Apps\\\\gemini-workout\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './index.css';\n\n// --- CONFIGURATION CONSTANTS ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MAX_ROUNDS = 15;\nconst MAX_TIME = 120;\nconst WORK_INCREMENT = 15;\nconst REST_INCREMENT = 5;\nconst PREP_TIME = 5;\n\n// --- WORKOUT STATE ENUM ---\nconst WORKOUT_STATES = {\n  SETUP: 'SETUP',\n  PREP: 'PREP',\n  WORK: 'WORK',\n  REST: 'REST',\n  COMPLETE: 'COMPLETE'\n};\n\n// --- HELPER FUNCTIONS ---\n\nconst formatTime = seconds => {\n  const minutes = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;\n};\n\n// Function to play the sound\nconst playHighPitchedNoise = () => {\n  // IMPORTANT: The sound file needs to be in the 'public' folder.\n  // We use the Audio constructor here.\n  try {\n    const audio = new Audio('/chime.mp3');\n    audio.volume = 0.8;\n    audio.play().catch(e => console.error(\"Audio playback error:\", e));\n  } catch (e) {\n    console.error(\"Browser audio API issue:\", e);\n  }\n};\n\n// Simple Scroll Wheel Component (Simulated via buttons for simplicity)\nconst ScrollInput = ({\n  label,\n  value,\n  max,\n  increment,\n  onChange\n}) => {\n  const increase = () => {\n    const newValue = Math.min(value + increment, max);\n    onChange(newValue);\n  };\n  const decrease = () => {\n    const newValue = Math.max(value - increment, increment > 1 ? increment : 1);\n    onChange(newValue);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-group\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"input-label\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scroll-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increase,\n        className: \"scroll-btn\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"input-value\",\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrease,\n        className: \"scroll-btn\",\n        children: \"-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n// --- MAIN APP COMPONENT ---\n_c = ScrollInput;\nfunction App() {\n  _s();\n  const [settings, setSettings] = useState({\n    rounds: 5,\n    workTime: 60,\n    restTime: 30\n  });\n  const [timerState, setTimerState] = useState(WORKOUT_STATES.SETUP);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [currentRound, setCurrentRound] = useState(1);\n  const intervalRef = useRef(null);\n\n  // Logic to handle state transitions (WORK -> REST, REST -> WORK)\n  const handleNextState = useCallback(() => {\n    if (timerState === WORKOUT_STATES.PREP) {\n      setTimerState(WORKOUT_STATES.WORK);\n      setTimeRemaining(settings.workTime);\n    } else if (timerState === WORKOUT_STATES.WORK) {\n      if (currentRound < settings.rounds) {\n        setTimerState(WORKOUT_STATES.REST);\n        setTimeRemaining(settings.restTime);\n      } else {\n        setTimerState(WORKOUT_STATES.COMPLETE);\n      }\n    } else if (timerState === WORKOUT_STATES.REST) {\n      const nextRound = currentRound + 1;\n      setCurrentRound(nextRound);\n      if (nextRound <= settings.rounds) {\n        setTimerState(WORKOUT_STATES.WORK);\n        setTimeRemaining(settings.workTime);\n      } else {\n        setTimerState(WORKOUT_STATES.COMPLETE);\n      }\n    }\n  }, [timerState, settings, currentRound]);\n\n  // The main timer loop (runs every second)\n  useEffect(() => {\n    if (timerState === WORKOUT_STATES.SETUP || timerState === WORKOUT_STATES.COMPLETE) {\n      return;\n    }\n    intervalRef.current = setInterval(() => {\n      setTimeRemaining(prevTime => {\n        const newTime = prevTime - 1;\n\n        // Sound Trigger: Plays on 3, 2, 1, 0 for all active timers\n        if (newTime >= 0 && newTime <= 3) {\n          playHighPitchedNoise();\n        }\n        if (newTime < 0) {\n          clearInterval(intervalRef.current);\n          handleNextState();\n          return 0;\n        }\n        return newTime;\n      });\n    }, 1000);\n    return () => clearInterval(intervalRef.current);\n  }, [timerState, settings.rounds, currentRound, handleNextState]);\n  const startWorkout = () => {\n    if (settings.rounds > 0 && settings.workTime > 0) {\n      setTimerState(WORKOUT_STATES.PREP);\n      setTimeRemaining(PREP_TIME); // Start 5-second countdown\n      setCurrentRound(1);\n    }\n  };\n\n  // Helper to reset the app\n  const resetWorkout = () => {\n    clearInterval(intervalRef.current);\n    setTimerState(WORKOUT_STATES.SETUP);\n    setTimeRemaining(0);\n    setCurrentRound(1);\n  };\n\n  // --- RENDER LOGIC ---\n\n  if (timerState === WORKOUT_STATES.SETUP) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app setup-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Interval Timer Setup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScrollInput, {\n        label: \"Rounds (Max 15)\",\n        value: settings.rounds,\n        max: MAX_ROUNDS,\n        increment: 1,\n        onChange: val => setSettings({\n          ...settings,\n          rounds: val\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScrollInput, {\n        label: `Work Time (Max ${MAX_TIME}s)`,\n        value: settings.workTime,\n        max: MAX_TIME,\n        increment: WORK_INCREMENT,\n        onChange: val => setSettings({\n          ...settings,\n          workTime: val\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScrollInput, {\n        label: `Rest Time (Max ${MAX_TIME}s)`,\n        value: settings.restTime,\n        max: MAX_TIME,\n        increment: REST_INCREMENT,\n        onChange: val => setSettings({\n          ...settings,\n          restTime: val\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startWorkout,\n        className: \"btn-start\",\n        disabled: settings.rounds === 0 || settings.workTime === 0,\n        children: \"Start Workout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this);\n  }\n\n  // Active Timer View\n  const phaseLabel = {\n    [WORKOUT_STATES.PREP]: 'GET READY',\n    [WORKOUT_STATES.WORK]: 'WORK',\n    [WORKOUT_STATES.REST]: 'REST',\n    [WORKOUT_STATES.COMPLETE]: 'COMPLETE'\n  }[timerState];\n  const isComplete = timerState === WORKOUT_STATES.COMPLETE;\n  const isPrep = timerState === WORKOUT_STATES.PREP;\n  const isWorking = timerState === WORKOUT_STATES.WORK;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app timer-view ${isWorking ? 'work-phase' : ''} ${timerState === WORKOUT_STATES.REST ? 'rest-phase' : ''} ${isComplete ? 'complete-phase' : ''}`,\n    children: [!isComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"round-tracker\",\n      children: isPrep ? 'PREP' : `ROUND ${currentRound} OF ${settings.rounds}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `phase-label ${phaseLabel.toLowerCase()}`,\n      children: phaseLabel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-timer\",\n      children: isPrep ? timeRemaining : formatTime(timeRemaining)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), isComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"complete-message\",\n      children: \"WORKOUT COMPLETE! \\uD83D\\uDCAA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetWorkout,\n      className: \"btn-reset\",\n      children: isComplete ? 'New Workout' : 'Stop / Reset'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"j9llH/ZadbqnN/RVAaqrV3pEzZQ=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ScrollInput\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","MAX_ROUNDS","MAX_TIME","WORK_INCREMENT","REST_INCREMENT","PREP_TIME","WORKOUT_STATES","SETUP","PREP","WORK","REST","COMPLETE","formatTime","seconds","minutes","Math","floor","secs","String","padStart","playHighPitchedNoise","audio","Audio","volume","play","catch","e","console","error","ScrollInput","label","value","max","increment","onChange","increase","newValue","min","decrease","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","App","_s","settings","setSettings","rounds","workTime","restTime","timerState","setTimerState","timeRemaining","setTimeRemaining","currentRound","setCurrentRound","intervalRef","handleNextState","nextRound","current","setInterval","prevTime","newTime","clearInterval","startWorkout","resetWorkout","val","disabled","phaseLabel","isComplete","isPrep","isWorking","toLowerCase","_c2","$RefreshReg$"],"sources":["C:/Ashwin/Apps/gemini-workout/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport './index.css';\r\n\r\n// --- CONFIGURATION CONSTANTS ---\r\nconst MAX_ROUNDS = 15;\r\nconst MAX_TIME = 120;\r\nconst WORK_INCREMENT = 15;\r\nconst REST_INCREMENT = 5;\r\nconst PREP_TIME = 5;\r\n\r\n// --- WORKOUT STATE ENUM ---\r\nconst WORKOUT_STATES = {\r\n    SETUP: 'SETUP',\r\n    PREP: 'PREP',\r\n    WORK: 'WORK',\r\n    REST: 'REST',\r\n    COMPLETE: 'COMPLETE'\r\n};\r\n\r\n// --- HELPER FUNCTIONS ---\r\n\r\nconst formatTime = (seconds) => {\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secs = seconds % 60;\r\n    return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;\r\n};\r\n\r\n// Function to play the sound\r\nconst playHighPitchedNoise = () => {\r\n    // IMPORTANT: The sound file needs to be in the 'public' folder.\r\n    // We use the Audio constructor here.\r\n    try {\r\n        const audio = new Audio('/chime.mp3'); \r\n        audio.volume = 0.8;\r\n        audio.play().catch(e => console.error(\"Audio playback error:\", e));\r\n    } catch (e) {\r\n        console.error(\"Browser audio API issue:\", e);\r\n    }\r\n};\r\n\r\n// Simple Scroll Wheel Component (Simulated via buttons for simplicity)\r\nconst ScrollInput = ({ label, value, max, increment, onChange }) => {\r\n    const increase = () => {\r\n        const newValue = Math.min(value + increment, max);\r\n        onChange(newValue);\r\n    };\r\n\r\n    const decrease = () => {\r\n        const newValue = Math.max(value - increment, increment > 1 ? increment : 1);\r\n        onChange(newValue);\r\n    };\r\n\r\n    return (\r\n        <div className=\"input-group\">\r\n            <label className=\"input-label\">{label}</label>\r\n            <div className=\"scroll-controls\">\r\n                <button onClick={increase} className=\"scroll-btn\">+</button>\r\n                <span className=\"input-value\">{value}</span>\r\n                <button onClick={decrease} className=\"scroll-btn\">-</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// --- MAIN APP COMPONENT ---\r\n\r\nfunction App() {\r\n    const [settings, setSettings] = useState({ rounds: 5, workTime: 60, restTime: 30 });\r\n    const [timerState, setTimerState] = useState(WORKOUT_STATES.SETUP);\r\n    const [timeRemaining, setTimeRemaining] = useState(0);\r\n    const [currentRound, setCurrentRound] = useState(1);\r\n    const intervalRef = useRef(null);\r\n\r\n    // Logic to handle state transitions (WORK -> REST, REST -> WORK)\r\n    const handleNextState = useCallback(() => {\r\n        if (timerState === WORKOUT_STATES.PREP) {\r\n            setTimerState(WORKOUT_STATES.WORK);\r\n            setTimeRemaining(settings.workTime);\r\n\r\n        } else if (timerState === WORKOUT_STATES.WORK) {\r\n            if (currentRound < settings.rounds) {\r\n                setTimerState(WORKOUT_STATES.REST);\r\n                setTimeRemaining(settings.restTime);\r\n            } else {\r\n                setTimerState(WORKOUT_STATES.COMPLETE);\r\n            }\r\n\r\n        } else if (timerState === WORKOUT_STATES.REST) {\r\n            const nextRound = currentRound + 1;\r\n            setCurrentRound(nextRound);\r\n\r\n            if (nextRound <= settings.rounds) {\r\n                setTimerState(WORKOUT_STATES.WORK);\r\n                setTimeRemaining(settings.workTime);\r\n            } else {\r\n                setTimerState(WORKOUT_STATES.COMPLETE);\r\n            }\r\n        }\r\n    }, [timerState, settings, currentRound]);\r\n\r\n    // The main timer loop (runs every second)\r\n    useEffect(() => {\r\n        if (timerState === WORKOUT_STATES.SETUP || timerState === WORKOUT_STATES.COMPLETE) {\r\n            return;\r\n        }\r\n\r\n        intervalRef.current = setInterval(() => {\r\n            setTimeRemaining(prevTime => {\r\n                const newTime = prevTime - 1;\r\n\r\n                // Sound Trigger: Plays on 3, 2, 1, 0 for all active timers\r\n                if (newTime >= 0 && newTime <= 3) {\r\n                    playHighPitchedNoise();\r\n                }\r\n\r\n                if (newTime < 0) {\r\n                    clearInterval(intervalRef.current);\r\n                    handleNextState();\r\n                    return 0;\r\n                }\r\n\r\n                return newTime;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(intervalRef.current);\r\n    }, [timerState, settings.rounds, currentRound, handleNextState]);\r\n\r\n    const startWorkout = () => {\r\n        if (settings.rounds > 0 && settings.workTime > 0) {\r\n            setTimerState(WORKOUT_STATES.PREP);\r\n            setTimeRemaining(PREP_TIME); // Start 5-second countdown\r\n            setCurrentRound(1);\r\n        }\r\n    };\r\n\r\n    // Helper to reset the app\r\n    const resetWorkout = () => {\r\n        clearInterval(intervalRef.current);\r\n        setTimerState(WORKOUT_STATES.SETUP);\r\n        setTimeRemaining(0);\r\n        setCurrentRound(1);\r\n    };\r\n\r\n    // --- RENDER LOGIC ---\r\n\r\n    if (timerState === WORKOUT_STATES.SETUP) {\r\n        return (\r\n            <div className=\"app setup-view\">\r\n                <h1 className=\"title\">Interval Timer Setup</h1>\r\n                <ScrollInput \r\n                    label=\"Rounds (Max 15)\"\r\n                    value={settings.rounds}\r\n                    max={MAX_ROUNDS}\r\n                    increment={1}\r\n                    onChange={(val) => setSettings({...settings, rounds: val})}\r\n                />\r\n                <ScrollInput \r\n                    label={`Work Time (Max ${MAX_TIME}s)`}\r\n                    value={settings.workTime}\r\n                    max={MAX_TIME}\r\n                    increment={WORK_INCREMENT}\r\n                    onChange={(val) => setSettings({...settings, workTime: val})}\r\n                />\r\n                <ScrollInput \r\n                    label={`Rest Time (Max ${MAX_TIME}s)`}\r\n                    value={settings.restTime}\r\n                    max={MAX_TIME}\r\n                    increment={REST_INCREMENT}\r\n                    onChange={(val) => setSettings({...settings, restTime: val})}\r\n                />\r\n                <button \r\n                    onClick={startWorkout} \r\n                    className=\"btn-start\"\r\n                    disabled={settings.rounds === 0 || settings.workTime === 0}\r\n                >\r\n                    Start Workout\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Active Timer View\r\n    const phaseLabel = {\r\n        [WORKOUT_STATES.PREP]: 'GET READY',\r\n        [WORKOUT_STATES.WORK]: 'WORK',\r\n        [WORKOUT_STATES.REST]: 'REST',\r\n        [WORKOUT_STATES.COMPLETE]: 'COMPLETE'\r\n    }[timerState];\r\n\r\n    const isComplete = timerState === WORKOUT_STATES.COMPLETE;\r\n    const isPrep = timerState === WORKOUT_STATES.PREP;\r\n    const isWorking = timerState === WORKOUT_STATES.WORK;\r\n\r\n    return (\r\n        <div className={`app timer-view ${isWorking ? 'work-phase' : ''} ${timerState === WORKOUT_STATES.REST ? 'rest-phase' : ''} ${isComplete ? 'complete-phase' : ''}`}>\r\n            \r\n            {!isComplete && (\r\n                <div className=\"round-tracker\">\r\n                    {isPrep ? 'PREP' : `ROUND ${currentRound} OF ${settings.rounds}`}\r\n                </div>\r\n            )}\r\n\r\n            <div className={`phase-label ${phaseLabel.toLowerCase()}`}>{phaseLabel}</div>\r\n\r\n            <div className=\"main-timer\">\r\n                {isPrep ? timeRemaining : formatTime(timeRemaining)}\r\n            </div>\r\n            \r\n            {isComplete && (\r\n                <div className=\"complete-message\">\r\n                    WORKOUT COMPLETE! 💪\r\n                </div>\r\n            )}\r\n\r\n            <button onClick={resetWorkout} className=\"btn-reset\">\r\n                {isComplete ? 'New Workout' : 'Stop / Reset'}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,OAAO,aAAa;;AAEpB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAG,EAAE;AACrB,MAAMC,QAAQ,GAAG,GAAG;AACpB,MAAMC,cAAc,GAAG,EAAE;AACzB,MAAMC,cAAc,GAAG,CAAC;AACxB,MAAMC,SAAS,GAAG,CAAC;;AAEnB;AACA,MAAMC,cAAc,GAAG;EACnBC,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE;AACd,CAAC;;AAED;;AAEA,MAAMC,UAAU,GAAIC,OAAO,IAAK;EAC5B,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;EACxC,MAAMI,IAAI,GAAGJ,OAAO,GAAG,EAAE;EACzB,OAAO,GAAGK,MAAM,CAACJ,OAAO,CAAC,CAACK,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAID,MAAM,CAACD,IAAI,CAAC,CAACE,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;AACjF,CAAC;;AAED;AACA,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EAC/B;EACA;EACA,IAAI;IACA,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,YAAY,CAAC;IACrCD,KAAK,CAACE,MAAM,GAAG,GAAG;IAClBF,KAAK,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAACC,CAAC,IAAIC,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEF,CAAC,CAAC,CAAC;EACtE,CAAC,CAAC,OAAOA,CAAC,EAAE;IACRC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,CAAC,CAAC;EAChD;AACJ,CAAC;;AAED;AACA,MAAMG,WAAW,GAAGA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC,GAAG;EAAEC,SAAS;EAAEC;AAAS,CAAC,KAAK;EAChE,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACnB,MAAMC,QAAQ,GAAGrB,IAAI,CAACsB,GAAG,CAACN,KAAK,GAAGE,SAAS,EAAED,GAAG,CAAC;IACjDE,QAAQ,CAACE,QAAQ,CAAC;EACtB,CAAC;EAED,MAAME,QAAQ,GAAGA,CAAA,KAAM;IACnB,MAAMF,QAAQ,GAAGrB,IAAI,CAACiB,GAAG,CAACD,KAAK,GAAGE,SAAS,EAAEA,SAAS,GAAG,CAAC,GAAGA,SAAS,GAAG,CAAC,CAAC;IAC3EC,QAAQ,CAACE,QAAQ,CAAC;EACtB,CAAC;EAED,oBACIpC,OAAA;IAAKuC,SAAS,EAAC,aAAa;IAAAC,QAAA,gBACxBxC,OAAA;MAAOuC,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAEV;IAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9C5C,OAAA;MAAKuC,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5BxC,OAAA;QAAQ6C,OAAO,EAAEV,QAAS;QAACI,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC5D5C,OAAA;QAAMuC,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAET;MAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC5C5C,OAAA;QAAQ6C,OAAO,EAAEP,QAAS;QAACC,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;;AAED;AAAAE,EAAA,GAvBMjB,WAAW;AAyBjB,SAASkB,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGvD,QAAQ,CAAC;IAAEwD,MAAM,EAAE,CAAC;IAAEC,QAAQ,EAAE,EAAE;IAAEC,QAAQ,EAAE;EAAG,CAAC,CAAC;EACnF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG5D,QAAQ,CAACW,cAAc,CAACC,KAAK,CAAC;EAClE,MAAM,CAACiD,aAAa,EAAEC,gBAAgB,CAAC,GAAG9D,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAAC+D,YAAY,EAAEC,eAAe,CAAC,GAAGhE,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAMiE,WAAW,GAAG/D,MAAM,CAAC,IAAI,CAAC;;EAEhC;EACA,MAAMgE,eAAe,GAAG/D,WAAW,CAAC,MAAM;IACtC,IAAIwD,UAAU,KAAKhD,cAAc,CAACE,IAAI,EAAE;MACpC+C,aAAa,CAACjD,cAAc,CAACG,IAAI,CAAC;MAClCgD,gBAAgB,CAACR,QAAQ,CAACG,QAAQ,CAAC;IAEvC,CAAC,MAAM,IAAIE,UAAU,KAAKhD,cAAc,CAACG,IAAI,EAAE;MAC3C,IAAIiD,YAAY,GAAGT,QAAQ,CAACE,MAAM,EAAE;QAChCI,aAAa,CAACjD,cAAc,CAACI,IAAI,CAAC;QAClC+C,gBAAgB,CAACR,QAAQ,CAACI,QAAQ,CAAC;MACvC,CAAC,MAAM;QACHE,aAAa,CAACjD,cAAc,CAACK,QAAQ,CAAC;MAC1C;IAEJ,CAAC,MAAM,IAAI2C,UAAU,KAAKhD,cAAc,CAACI,IAAI,EAAE;MAC3C,MAAMoD,SAAS,GAAGJ,YAAY,GAAG,CAAC;MAClCC,eAAe,CAACG,SAAS,CAAC;MAE1B,IAAIA,SAAS,IAAIb,QAAQ,CAACE,MAAM,EAAE;QAC9BI,aAAa,CAACjD,cAAc,CAACG,IAAI,CAAC;QAClCgD,gBAAgB,CAACR,QAAQ,CAACG,QAAQ,CAAC;MACvC,CAAC,MAAM;QACHG,aAAa,CAACjD,cAAc,CAACK,QAAQ,CAAC;MAC1C;IACJ;EACJ,CAAC,EAAE,CAAC2C,UAAU,EAAEL,QAAQ,EAAES,YAAY,CAAC,CAAC;;EAExC;EACA9D,SAAS,CAAC,MAAM;IACZ,IAAI0D,UAAU,KAAKhD,cAAc,CAACC,KAAK,IAAI+C,UAAU,KAAKhD,cAAc,CAACK,QAAQ,EAAE;MAC/E;IACJ;IAEAiD,WAAW,CAACG,OAAO,GAAGC,WAAW,CAAC,MAAM;MACpCP,gBAAgB,CAACQ,QAAQ,IAAI;QACzB,MAAMC,OAAO,GAAGD,QAAQ,GAAG,CAAC;;QAE5B;QACA,IAAIC,OAAO,IAAI,CAAC,IAAIA,OAAO,IAAI,CAAC,EAAE;UAC9B9C,oBAAoB,CAAC,CAAC;QAC1B;QAEA,IAAI8C,OAAO,GAAG,CAAC,EAAE;UACbC,aAAa,CAACP,WAAW,CAACG,OAAO,CAAC;UAClCF,eAAe,CAAC,CAAC;UACjB,OAAO,CAAC;QACZ;QAEA,OAAOK,OAAO;MAClB,CAAC,CAAC;IACN,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMC,aAAa,CAACP,WAAW,CAACG,OAAO,CAAC;EACnD,CAAC,EAAE,CAACT,UAAU,EAAEL,QAAQ,CAACE,MAAM,EAAEO,YAAY,EAAEG,eAAe,CAAC,CAAC;EAEhE,MAAMO,YAAY,GAAGA,CAAA,KAAM;IACvB,IAAInB,QAAQ,CAACE,MAAM,GAAG,CAAC,IAAIF,QAAQ,CAACG,QAAQ,GAAG,CAAC,EAAE;MAC9CG,aAAa,CAACjD,cAAc,CAACE,IAAI,CAAC;MAClCiD,gBAAgB,CAACpD,SAAS,CAAC,CAAC,CAAC;MAC7BsD,eAAe,CAAC,CAAC,CAAC;IACtB;EACJ,CAAC;;EAED;EACA,MAAMU,YAAY,GAAGA,CAAA,KAAM;IACvBF,aAAa,CAACP,WAAW,CAACG,OAAO,CAAC;IAClCR,aAAa,CAACjD,cAAc,CAACC,KAAK,CAAC;IACnCkD,gBAAgB,CAAC,CAAC,CAAC;IACnBE,eAAe,CAAC,CAAC,CAAC;EACtB,CAAC;;EAED;;EAEA,IAAIL,UAAU,KAAKhD,cAAc,CAACC,KAAK,EAAE;IACrC,oBACIP,OAAA;MAAKuC,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC3BxC,OAAA;QAAIuC,SAAS,EAAC,OAAO;QAAAC,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/C5C,OAAA,CAAC6B,WAAW;QACRC,KAAK,EAAC,iBAAiB;QACvBC,KAAK,EAAEkB,QAAQ,CAACE,MAAO;QACvBnB,GAAG,EAAE/B,UAAW;QAChBgC,SAAS,EAAE,CAAE;QACbC,QAAQ,EAAGoC,GAAG,IAAKpB,WAAW,CAAC;UAAC,GAAGD,QAAQ;UAAEE,MAAM,EAAEmB;QAAG,CAAC;MAAE;QAAA7B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9D,CAAC,eACF5C,OAAA,CAAC6B,WAAW;QACRC,KAAK,EAAE,kBAAkB5B,QAAQ,IAAK;QACtC6B,KAAK,EAAEkB,QAAQ,CAACG,QAAS;QACzBpB,GAAG,EAAE9B,QAAS;QACd+B,SAAS,EAAE9B,cAAe;QAC1B+B,QAAQ,EAAGoC,GAAG,IAAKpB,WAAW,CAAC;UAAC,GAAGD,QAAQ;UAAEG,QAAQ,EAAEkB;QAAG,CAAC;MAAE;QAAA7B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChE,CAAC,eACF5C,OAAA,CAAC6B,WAAW;QACRC,KAAK,EAAE,kBAAkB5B,QAAQ,IAAK;QACtC6B,KAAK,EAAEkB,QAAQ,CAACI,QAAS;QACzBrB,GAAG,EAAE9B,QAAS;QACd+B,SAAS,EAAE7B,cAAe;QAC1B8B,QAAQ,EAAGoC,GAAG,IAAKpB,WAAW,CAAC;UAAC,GAAGD,QAAQ;UAAEI,QAAQ,EAAEiB;QAAG,CAAC;MAAE;QAAA7B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChE,CAAC,eACF5C,OAAA;QACI6C,OAAO,EAAEuB,YAAa;QACtB7B,SAAS,EAAC,WAAW;QACrBgC,QAAQ,EAAEtB,QAAQ,CAACE,MAAM,KAAK,CAAC,IAAIF,QAAQ,CAACG,QAAQ,KAAK,CAAE;QAAAZ,QAAA,EAC9D;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAEd;;EAEA;EACA,MAAM4B,UAAU,GAAG;IACf,CAAClE,cAAc,CAACE,IAAI,GAAG,WAAW;IAClC,CAACF,cAAc,CAACG,IAAI,GAAG,MAAM;IAC7B,CAACH,cAAc,CAACI,IAAI,GAAG,MAAM;IAC7B,CAACJ,cAAc,CAACK,QAAQ,GAAG;EAC/B,CAAC,CAAC2C,UAAU,CAAC;EAEb,MAAMmB,UAAU,GAAGnB,UAAU,KAAKhD,cAAc,CAACK,QAAQ;EACzD,MAAM+D,MAAM,GAAGpB,UAAU,KAAKhD,cAAc,CAACE,IAAI;EACjD,MAAMmE,SAAS,GAAGrB,UAAU,KAAKhD,cAAc,CAACG,IAAI;EAEpD,oBACIT,OAAA;IAAKuC,SAAS,EAAE,kBAAkBoC,SAAS,GAAG,YAAY,GAAG,EAAE,IAAIrB,UAAU,KAAKhD,cAAc,CAACI,IAAI,GAAG,YAAY,GAAG,EAAE,IAAI+D,UAAU,GAAG,gBAAgB,GAAG,EAAE,EAAG;IAAAjC,QAAA,GAE7J,CAACiC,UAAU,iBACRzE,OAAA;MAAKuC,SAAS,EAAC,eAAe;MAAAC,QAAA,EACzBkC,MAAM,GAAG,MAAM,GAAG,SAAShB,YAAY,OAAOT,QAAQ,CAACE,MAAM;IAAE;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CACR,eAED5C,OAAA;MAAKuC,SAAS,EAAE,eAAeiC,UAAU,CAACI,WAAW,CAAC,CAAC,EAAG;MAAApC,QAAA,EAAEgC;IAAU;MAAA/B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAE7E5C,OAAA;MAAKuC,SAAS,EAAC,YAAY;MAAAC,QAAA,EACtBkC,MAAM,GAAGlB,aAAa,GAAG5C,UAAU,CAAC4C,aAAa;IAAC;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,EAEL6B,UAAU,iBACPzE,OAAA;MAAKuC,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAAC;IAElC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACR,eAED5C,OAAA;MAAQ6C,OAAO,EAAEwB,YAAa;MAAC9B,SAAS,EAAC,WAAW;MAAAC,QAAA,EAC/CiC,UAAU,GAAG,aAAa,GAAG;IAAc;MAAAhC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd;AAACI,EAAA,CA1JQD,GAAG;AAAA8B,GAAA,GAAH9B,GAAG;AA4JZ,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAA+B,GAAA;AAAAC,YAAA,CAAAhC,EAAA;AAAAgC,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}